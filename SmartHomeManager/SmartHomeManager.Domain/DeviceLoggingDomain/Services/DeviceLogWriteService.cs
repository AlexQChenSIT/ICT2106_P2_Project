using SmartHomeManager.Domain.DeviceLoggingDomain.Entities;
using SmartHomeManager.Domain.DeviceLoggingDomain.Entities.DTO;
using SmartHomeManager.Domain.DeviceLoggingDomain.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SmartHomeManager.Domain.DeviceLoggingDomain.Services
{
    public class DeviceLogWriteService
    {
        private readonly IDeviceLogRepository _deviceLogRepository;


        public DeviceLogWriteService(IDeviceLogRepository deviceLogRepository)
        {
            _deviceLogRepository = deviceLogRepository;
        }
        // when add device i just need device id
        // the rest are fixed values that can be generated by system
        public async Task<GetDeviceLogWebRequest> AddDeviceLog(Guid deviceId) {
            var newDeviceLog = new DeviceLog
            {
                DeviceId = deviceId,
                StartTime = DateTime.Now,
                DateLogged = DateTime.Now,
                DeviceActivity = 0,
                DeviceState = true
            };
            _deviceLogRepository.Add(newDeviceLog);
            await _deviceLogRepository.SaveChangesAsync();

            var ret = new GetDeviceLogWebRequest 
            {
                LogId = newDeviceLog.LogId,
                DeviceState = newDeviceLog.DeviceState

            };
            return ret;
        }


        // should update when devices turn off hence device state
        public async Task UpdateDeviceLog(DateTime date, bool DeviceState) { 
            var res = await _deviceLogRepository.Get(date.Date, DeviceState);
            if (res != null) return;
            res.EndTime = DateTime.Now;
            res.DeviceState = DeviceState;
            _deviceLogRepository.Update(res);
            await _deviceLogRepository.SaveChangesAsync();
        }

        // UpdateBy Schedular, 0000 & hourly
        public async Task UpdateDeviceLogBySchedular(DateTime date)
        {
            var res = await _deviceLogRepository.Get(date.Date);
            if (res != null) return;
            res.EndTime = DateTime.Now;
            _deviceLogRepository.Update(res);
            await _deviceLogRepository.SaveChangesAsync();
        }

    }
}
